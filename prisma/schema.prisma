  // This is your Prisma schema file,
  // learn more about it in the docs: https://pris.ly/d/prisma-schema

  // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
  // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
  }

model User {
  id               String       @id @default(uuid())
  profilePicture   String?      
  name             String
  email            String?      @unique
  password         String    
  role             String       @default("user")
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  isEmailVerified  Boolean      @default(false)
  bannerAds        BannerAds[]
  plans            Plan[]
  clicks           UserHotelClick[]
  bookmarks        UserHotelBookmark[]  // Relasi ke UserHotelBookmark
}

model Hotel {
  id              String      @id @default(uuid())
  name            String
  cheap           Int
  luxurious       Int
  clean           Int
  cozy            Int
  goodService     Int
  niceView        Int
  parking         Int
  pool            Int
  spa             Int
  gym             Int
  strategic       Int
  delicious       Int
  breakfast       Int
  safety          Int
  family          Int
  pet             Int
  aesthetic       Int
  disability      Int
  laundry         Int
  wifi            Int
  hotelDetails    HotelDetail[]
  clicks          UserHotelClick[]
  bookmarks       UserHotelBookmark[]  
}

model UserHotelClick {
  id        String   @id @default(uuid()) 
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  hotelId   String  
  hotel     Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  clickedAt DateTime @default(now())
  @@unique([userId, hotelId])
}

model UserHotelBookmark {
  id        String   @id @default(uuid()) 
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  hotelId   String    
  hotel     Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  bookmarkedAt DateTime @default(now())
  @@unique([userId, hotelId])
}

model HotelDetail {
  id            String      @id @default(uuid())
  hotelId       String
  hotel         Hotel       @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  imageUrl      String
  name          String
  address       String
  cost          Float
  description   String
  hotelPlan     HotelPlan[]
}

model Plan {
  id                  String       @id @default(uuid())
  name                String
  startDate           DateTime
  endDate             DateTime
  city                String @default("bali")
  travelCompanion     String
  budget              Int
  travelTheme         String
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  userId              String
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  planDetails PlanDetail[]
}

model PlanDetail {
  id          String      @id @default(uuid())
  day         Int         
  date        DateTime   
  planId      String
  plan        Plan        @relation(fields: [planId], references: [id], onDelete: Cascade)
  activities  Activity[]
  destination Destination[]  
  hotel       HotelPlan[]
}

model HotelPlan {
  id              String       @id @default(uuid())
  hotelDetailId   String
  hotelDetail     HotelDetail   @relation(fields: [hotelDetailId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  planDetailId    String
  planDetail      PlanDetail   @relation(fields: [planDetailId], references: [id], onDelete: Cascade)
}

model Activity {
  id            String      @id @default(uuid())
  name          String
  description   String
  location      String
  cost          Float
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  planDetailId  String
  planDetail    PlanDetail   @relation(fields: [planDetailId], references: [id], onDelete: Cascade)
}

model Destination {
  id            String      @id @default(uuid())
  name          String      
  address       String
  description   String 
  planDetailId  String
  planDetail    PlanDetail   @relation(fields: [planDetailId], references: [id], onDelete: Cascade)
  categoryId    String
  category    Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Category {
  id            String      @id @default(uuid())
  name          String
  imageUrl     String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  destination   Destination[]
}

model BannerAds {
  id                String       @id @default(uuid())
  userId            String
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageUrl          String       
  title             String
  description       String
  startDate         String
  location          String
  cost              Float
  targetUrl         String
  bannerDuration    Int 
  validUntil        DateTime
  isActive          Boolean      @default(false)
  isPaid            Boolean      @default(false)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}